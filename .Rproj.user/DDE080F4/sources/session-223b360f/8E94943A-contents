# dati e funzioni ----
# source("0-genera-dati-stima-inla.R")
source("0M-genera-dati-stima-inla.R")
source("0-fun-effetti-fissi.R")







ord <- order(y)
y_s <- y[ord]
X_s <- X[ord,]
lam_s <- lam_init[ord]
X_mix <- rbind(X_s, X_s[y_s>0,])
n_0 <- sum(y == 0)
n<-length(y)
mat <- mixcomp_poisson()
################################
## mistura dentro per ora, non ci sono check su quella
per_r1 <- compute_mixture(1, mat)
w_r1 <- per_r1$w
m_r1 <- per_r1$m
v_r1 <- per_r1$v
mix_comps <- vector("list", n)
for(k in (n_0 + 1):n){
  mix_comps[[k]] <- compute_mixture(y_s[k], mat)
}

m_r2 <- matrix(unlist(map(
  mix_comps, ~(.$m)
)), ncol = 10, byrow = T)

v_r2 <- matrix(unlist(map(
  mix_comps, ~(.$v)
)), ncol = 10, byrow = T)

w_r2 <- matrix(unlist(map(
  mix_comps, ~(.$w)
)), ncol = 10, byrow = T)

m_mix <- rbind(m_r1, m_r2)
v_mix <- rbind(v_r1, v_r2)
w_mix <- rbind(w_r1, w_r2)

Q_pri_beta <- prec_fix * diag(ncol(X_mix))
lam_s_mcmc<- lam_s
beta_store <- matrix(NA, nmc, ncol(X_mix))
m_log_tau_store <- matrix(NA, nmc, nrow(X_mix))
lambda_store <- matrix(NA, nmc, nrow(X_mix))
log_lik <- numeric(nmc)
log_lik_approx <- numeric(nmc)

for(k in 1:nmc){
  appo <- sample_Improved_aux(lam_s_mcmc, y_s, n_0, n,
                              m_mix, v_mix, w_mix)
  log_lik[k] <- appo$loglik
  log_lik_approx[k] <- appo$log_lik_app
  y_aux <-  m_log_tau_store[k,] <- - log(appo$res1[,1])
  m_aux <- appo$res1[,2]
  vars_aux <- appo$res1[,3]
  Q_beta_fc <- (t(X_mix) %*% diag(1 / vars_aux) %*% X_mix + Q_pri_beta) 
  mu_beta_fc <- solve(Q_beta_fc) %*% t(X_mix) %*% diag(1 / vars_aux) %*% (y_aux - m_aux)
  beta_samp <- c(mvtnorm::rmvnorm(1, mu_beta_fc, solve(Q_beta_fc)))
  lam_s_mcmc <- lambda_store[k,] <- exp(X_mix %*% beta_samp)
  beta_store[k, ] <- beta_samp
  if(k%%100 == 0) print(k)
}





####################################










# prior beta ----
Q_pri_beta <- prec_fix * diag(p)
S_pri_beta <- solve(Q_pri_beta)

# init quantities
Z <- as.matrix(Z)
Z_star <- Z[ind_s, ]
K_gamma <- diag(ncol(Z))
R_K_gamma <- ncol(Z)
lam_s_mcmc<- lam_s
gamma_samp <- rep(0, ncol(Z))
beta_samp <- c(0,1)
Q_pri_gamma <- K_gamma
X_star_beta_samp <- c(X_star %*% beta_samp)
Z_star_gamma_samp <- c(Z_star %*% gamma_samp)

# init quantities
nmc <- 200000
beta_store <- matrix(0, nmc, p)
gamma_store <- matrix(0, nmc, ncol(Z))
s2_gamma_store <- numeric(nmc)
accetta <- accetta_gamma <- numeric(nmc)

a_pri <- b_pri <- 1


for(k in 2:nmc){
  aux <- SamplerPoisson::sample_aux_Poisson_2006_r(
    log(lam_s_mcmc), y = y_s, n_mix = n_star, w_mix = par_mix$w, 
    m_mix = par_mix$m, v_mix = par_mix$s2)
  y_star <- aux$z_aux; m_r <- aux$mean_aux; v_r <- aux$var_aux
  
  beta_prop <- gibbs_beta(y_star - Z_star_gamma_samp, X_star, m = m_r, v_r, Q_pri_beta)
  lam_s_prop <- c(exp(X_s %*% beta_prop + Z %*% gamma_samp))
  
  # 3 - acceptance step ----
  accept_prob <- acc_prob_beta(y_star, lam_s_prop, lam_s_mcmc, 
                               ind_s = ind_s)
  
  u <- runif(1)
  accetta[k] <- (u < accept_prob) * 1
  if(accetta[k] == 1){
    beta_samp <- beta_prop
    lam_s_mcmc <- lam_s_prop
  } 
  
  X_star_beta_samp <- c(X_star %*% beta_samp)
  
  gamma_prop <- gibbs_beta(y_star - X_star_beta_samp, Z_star, m = m_r, v_r, Q_pri_gamma)
  #gamma_prop <- gamma_prop - mean(gamma_prop)
  lam_s_prop <- c(exp(X_s %*% beta_samp + Z %*% gamma_prop))
  
  accept_prob_gamma <- acc_prob_beta(y_star, lam_s_prop, lam_s_mcmc, 
                                     ind_s = ind_s)
  
  u <- runif(1)
  accetta_gamma[k] <- (u < accept_prob_gamma) * 1
  if(accetta_gamma[k] == 1){
    gamma_samp <- gamma_prop
    lam_s_mcmc <- lam_s_prop
  } 
  
  Z_star_gamma_samp <- c(Z_star %*% gamma_samp)
  
  lam_s_mcmc <- c(exp(X_s %*% beta_samp + Z %*% gamma_samp))
  
  s2_gamma <- rgamma(
    1, a_pri + (R_K_gamma)/2, b_pri + c(t(gamma_samp) %*% K_gamma %*% gamma_samp) / 2)
  Q_pri_gamma <- K_gamma * s2_gamma
  
  
  beta_store[k, ] <- beta_samp
  gamma_store[k, ] <- gamma_samp
  s2_gamma_store[k] <- 1 / s2_gamma
  if(k%%1000 == 0) print(c(k, mean(accetta[(k-500+1):k]), mean(accetta_gamma[(k-500+1):k])))
}

plot(out_inla$marginals.fixed$`(Intercept)`, type = "l")
lines(density(beta_store[,1]), col = 4)
lines(density(extract(post_stan, "beta0")[[1]]), col = 2)


plot(out_inla$marginals.fixed$x, type = "l")
lines(density(beta_store[,2]), col = 4)
lines(density(extract(post_stan, "beta1")[[1]]), col = 2)


plot(colMeans(gamma_store),
     out_inla$summary.random$`factor(group_s)`$mean
)
abline(0,1)

plot(out_inla$marginals.hyperpar$`Precision for factor(group_s)`, type = "l")
lines(density(1/ s2_gamma_store), col = 4)
lines(density(extract(post_stan, "tau_u")[[1]]), col = 2)


quale <- 10#sample(1:10, 1)
plot(out_inla$marginals.random$`factor(group_s)`[[quale]], type = "l", main = quale)
lines(density(gamma_store[,quale]), col = 4)
lines(density(extract(post_stan, "u")[[1]][,quale]), col = 2)

